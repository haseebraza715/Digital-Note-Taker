{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Waseer\\\\OneDrive\\\\Desktop\\\\Digital-note-taker\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NoteForm from \"./NoteForm\";\nimport NoteList from \"./NoteList\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { FaUser } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [isDarkTheme, setIsDarkTheme] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [isServerOnline, setIsServerOnline] = useState(true);\n\n  // Check if Flask server is reachable\n  const checkServerStatus = async () => {\n    try {\n      await axios.get(\"http://127.0.0.1:5000/health\"); // Assuming you have a health check endpoint in Flask\n      setIsServerOnline(true);\n    } catch (error) {\n      setIsServerOnline(false);\n    }\n  };\n  useEffect(() => {\n    checkServerStatus(); // Check server status on mount\n  }, []);\n  useEffect(() => {\n    document.body.classList.add(isDarkTheme ? \"dark-theme\" : \"light-theme\");\n    document.body.classList.remove(isDarkTheme ? \"light-theme\" : \"dark-theme\");\n  }, [isDarkTheme]);\n  const fetchNotes = async () => {\n    if (isServerOnline) {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/notes\");\n        setNotes(response.data);\n      } catch (error) {\n        setError(\"Error fetching notes:\", error);\n        setIsServerOnline(false); // Set server status to offline if request fails\n      }\n    } else {\n      // Fallback to local storage if server is offline\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      setNotes(localNotes);\n    }\n  };\n  const addNote = async note => {\n    if (notes.some(n => n.title === note.title)) {\n      alert(\"A note with this title already exists!\");\n      return;\n    }\n    if (isServerOnline) {\n      try {\n        await axios.post(\"http://127.0.0.1:5000/notes\", note);\n        fetchNotes();\n      } catch (error) {\n        setError(\"Error adding note:\", error);\n        setIsServerOnline(false);\n      }\n    } else {\n      // Fallback to local storage if server is offline\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      localNotes.push(note);\n      localStorage.setItem(\"notes\", JSON.stringify(localNotes));\n      setNotes(localNotes);\n    }\n  };\n  const updateNote = async (id, updatedContent) => {\n    if (isServerOnline) {\n      try {\n        await axios.put(`http://127.0.0.1:5000/notes/${id}`, updatedContent);\n        fetchNotes();\n        setSelectedNote(null);\n      } catch (error) {\n        setError(\"Error updating note:\", error);\n        setIsServerOnline(false);\n      }\n    } else {\n      // Update note in local storage if server is offline\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      const updatedNotes = localNotes.map(note => note.id === id ? {\n        ...note,\n        ...updatedContent\n      } : note);\n      localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n      setNotes(updatedNotes);\n    }\n  };\n  const deleteNote = async id => {\n    if (isServerOnline) {\n      try {\n        // Delete the specific note from the server by its unique ID\n        await axios.delete(`http://127.0.0.1:5000/notes/${id}`);\n        fetchNotes(); // Refresh the list of notes\n      } catch (error) {\n        setError(\"Error deleting note:\", error);\n        setIsServerOnline(false); // Switch to offline if there's an error\n      }\n    } else {\n      // Delete the specific note from local storage by its unique ID\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      const updatedNotes = localNotes.filter(note => note.id !== id); // Ensure only the selected note is removed\n      localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n      setNotes(updatedNotes); // Update the state with the modified notes array\n    }\n  };\n  const selectNote = note => {\n    setSelectedNote(note);\n  };\n  const toggleTheme = () => {\n    setIsDarkTheme(prevTheme => !prevTheme);\n  };\n  useEffect(() => {\n    fetchNotes();\n  }, [isServerOnline]); // Refetch notes if server status changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${isDarkTheme ? \"dark-theme\" : \"light-theme\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Digital Note-Taker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleTheme,\n          className: \"theme-toggle\",\n          children: isDarkTheme ? \"Switch to Light Theme\" : \"Switch to Dark Theme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"author-info\",\n          children: [/*#__PURE__*/_jsxDEV(FaUser, {\n            className: \"header-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Created by\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://www.linkedin.com/in/haseeb-raza-00a845231/\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"Haseeb Raza\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\",\n        marginTop: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(NoteForm, {\n        addNote: addNote,\n        updateNote: updateNote,\n        selectedNote: selectedNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: notes,\n        deleteNote: deleteNote,\n        selectNote: selectNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kcY2azfpDrpc1LqtQKnJKAOAX0g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","NoteForm","NoteList","axios","FaUser","jsxDEV","_jsxDEV","App","_s","notes","setNotes","selectedNote","setSelectedNote","isDarkTheme","setIsDarkTheme","error","setError","isServerOnline","setIsServerOnline","checkServerStatus","get","document","body","classList","add","remove","fetchNotes","response","data","localNotes","JSON","parse","localStorage","getItem","addNote","note","some","n","title","alert","post","push","setItem","stringify","updateNote","id","updatedContent","put","updatedNotes","map","deleteNote","delete","filter","selectNote","toggleTheme","prevTheme","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","href","target","rel","style","color","textAlign","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/Waseer/OneDrive/Desktop/Digital-note-taker/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NoteForm from \"./NoteForm\";\nimport NoteList from \"./NoteList\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { FaUser } from \"react-icons/fa\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [isDarkTheme, setIsDarkTheme] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [isServerOnline, setIsServerOnline] = useState(true);\n\n  // Check if Flask server is reachable\n  const checkServerStatus = async () => {\n    try {\n      await axios.get(\"http://127.0.0.1:5000/health\"); // Assuming you have a health check endpoint in Flask\n      setIsServerOnline(true);\n    } catch (error) {\n      setIsServerOnline(false);\n    }\n  };\n\n  useEffect(() => {\n    checkServerStatus(); // Check server status on mount\n  }, []);\n\n  useEffect(() => {\n    document.body.classList.add(isDarkTheme ? \"dark-theme\" : \"light-theme\");\n    document.body.classList.remove(isDarkTheme ? \"light-theme\" : \"dark-theme\");\n  }, [isDarkTheme]);\n\n  const fetchNotes = async () => {\n    if (isServerOnline) {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/notes\");\n        setNotes(response.data);\n      } catch (error) {\n        setError(\"Error fetching notes:\", error);\n        setIsServerOnline(false); // Set server status to offline if request fails\n      }\n    } else {\n      // Fallback to local storage if server is offline\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      setNotes(localNotes);\n    }\n  };\n\n  const addNote = async (note) => {\n    if (notes.some((n) => n.title === note.title)) {\n      alert(\"A note with this title already exists!\");\n      return;\n    }\n\n    if (isServerOnline) {\n      try {\n        await axios.post(\"http://127.0.0.1:5000/notes\", note);\n        fetchNotes();\n      } catch (error) {\n        setError(\"Error adding note:\", error);\n        setIsServerOnline(false);\n      }\n    } else {\n      // Fallback to local storage if server is offline\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      localNotes.push(note);\n      localStorage.setItem(\"notes\", JSON.stringify(localNotes));\n      setNotes(localNotes);\n    }\n  };\n\n  const updateNote = async (id, updatedContent) => {\n    if (isServerOnline) {\n      try {\n        await axios.put(`http://127.0.0.1:5000/notes/${id}`, updatedContent);\n        fetchNotes();\n        setSelectedNote(null);\n      } catch (error) {\n        setError(\"Error updating note:\", error);\n        setIsServerOnline(false);\n      }\n    } else {\n      // Update note in local storage if server is offline\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      const updatedNotes = localNotes.map((note) =>\n        note.id === id ? { ...note, ...updatedContent } : note\n      );\n      localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n      setNotes(updatedNotes);\n    }\n  };\n\n  const deleteNote = async (id) => {\n    if (isServerOnline) {\n      try {\n        // Delete the specific note from the server by its unique ID\n        await axios.delete(`http://127.0.0.1:5000/notes/${id}`);\n        fetchNotes(); // Refresh the list of notes\n      } catch (error) {\n        setError(\"Error deleting note:\", error);\n        setIsServerOnline(false); // Switch to offline if there's an error\n      }\n    } else {\n      // Delete the specific note from local storage by its unique ID\n      const localNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n      const updatedNotes = localNotes.filter((note) => note.id !== id); // Ensure only the selected note is removed\n      localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n      setNotes(updatedNotes); // Update the state with the modified notes array\n    }\n  };\n  \n  const selectNote = (note) => {\n    setSelectedNote(note);\n  };\n\n  const toggleTheme = () => {\n    setIsDarkTheme((prevTheme) => !prevTheme);\n  };\n\n  useEffect(() => {\n    fetchNotes();\n  }, [isServerOnline]); // Refetch notes if server status changes\n\n  return (\n    <div\n      className={`app-container ${isDarkTheme ? \"dark-theme\" : \"light-theme\"}`}\n    >\n      <div className=\"header\">\n        <div className=\"title-container\">\n          <h1>Digital Note-Taker</h1>\n        </div>\n        <div className=\"header-actions\">\n          <button onClick={toggleTheme} className=\"theme-toggle\">\n            {isDarkTheme ? \"Switch to Light Theme\" : \"Switch to Dark Theme\"}\n          </button>\n          <div className=\"author-info\">\n            <FaUser className=\"header-icon\" />\n            <span>\n              Created by{\" \"}\n              <a\n                href=\"https://www.linkedin.com/in/haseeb-raza-00a845231/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Haseeb Raza\n              </a>\n            </span>\n          </div>\n        </div>\n      </div>\n      {error && (\n        <p style={{ color: \"red\", textAlign: \"center\", marginTop: \"10px\" }}>\n          {error}\n        </p>\n      )}\n      <main className=\"main-content\">\n        <NoteForm\n          addNote={addNote}\n          updateNote={updateNote}\n          selectedNote={selectedNote}\n        />\n        <NoteList\n          notes={notes}\n          deleteNote={deleteNote}\n          selectNote={selectNote}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}